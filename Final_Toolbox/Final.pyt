# ####### FINAL TOOLBOX# In this toolbox, I decided to use my favorite tools - Select, Clip, and Buffer <3# I have selected lakes in Washington County and Buffered them 200 ft# I also added one more tool as a little surprise/bonus# STEP 1# As always, I input arcpy, set my workspace, and enable overwriteimport arcpybase_folder = "C:\ArcGIS_python\Final_Toolbox\Final_Data"arcpy.env.workspace = base_folderarcpy.env.overwriteOutput = True# STEP 2: DEFINING MY TOOLBOX# This toolbox (Bella's Final Toolbox) has 4 tools-# Select, Clip, Buffer, and AddMessageclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Bella's Final Toolbox"        self.alias = ""        # List of tool classes associated with this toolbox        self.tools = [Select, Clip, Buffer, AddMessage]# STEP 3: Tool 1- Select# This tool uses the Towns shapefile and selects only the polygons# WASHINGTON COUNTY (where_clause = washington county)# My input parameter is Towns.shp. There is only one input parameter.# The output is a new shapefile containing only the towns in Washington County.class Select(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Selecting Washington County"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = []        input_towns = arcpy.Parameter(name="input_towns",                             displayName="Input Towns",                             datatype="DEFeatureClass",                             parameterType="Required",  # Required|Optional|Derived                             direction="Input",  # Input|Output                             )        input_towns.value = "towns.shp"        params.append(input_towns)        output_select = arcpy.Parameter(name="output_select",                         displayName="Output",                         datatype="DEFeatureClass",                         parameterType="Required",  # Required|Optional|Derived                         direction="Output",  # Input|Output                         )        output_select.value = "Washington_County.shp" # This is a default value that can be over-ridden in the toolbox        params.append(output_select)        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        input_towns = parameters[0].valueAsText        output = parameters[1].valueAsText        arcpy.Select_analysis(in_features=input_towns, out_feature_class = output,                              where_clause="COUNTY = 'WASHINGTON'")        return# STEP 4: Tool 2- Clip# This tool clips the Lakes shapefile to the boundary of Washington County.# This tool has 2 input parameters - the first being actual input (Lakes shapefile)# and the second being clipping extent (our new Washington County shapefile we generated# in the last tool.)# The output is the Lakes of Washington County shapefile.# In total, there are 3 parameters (input, clip extent, output) which correspond to#  parameters [0, 1, 2]class Clip(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Clipping lakes to County"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = []        input_lakes = arcpy.Parameter(name="input_lakes",                             displayName="Input Lakes",                             datatype="DEFeatureClass",                             parameterType="Required",  # Required|Optional|Derived                             direction="Input",  # Input|Output                             )        input_lakes.value = "Lakes.shp"        params.append(input_lakes)        input_county = arcpy.Parameter(name="input_county",                                displayName="Input County",                                datatype="DEFeatureClass",                                parameterType="Required",  # Required|Optional|Derived                                direction="Input",  # Input|Output                                )        input_county.value = "Washington_County.shp"        params.append(input_county)        output = arcpy.Parameter(name="output",                         displayName="Output",                         datatype="DEFeatureClass",                         parameterType="Required",  # Required|Optional|Derived                         direction="Output",  # Input|Output                         )        output.value = "Lakes_Wash_County.shp" # This is a default value that can be over-ridden in the toolbox        params.append(output)        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        input_lakes = parameters[0].valueAsText        input_county = parameters[1].valueAsText        output = parameters[2].valueAsText        arcpy.Clip_analysis(in_features=input_lakes,                              clip_features=input_county,                              out_feature_class=output)        return# STEP 5: Tool 3- Buffer# This tool buffers the Lakes of Washington County shapefile 200 ft.# This tool has 1 input parameter - the Lakes of Washington County Shapefile.# The output is the Lakes Buffer shapefile.# This means there are 2 parameters.class Buffer(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Buffering rivers 100 ft"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = []        input_lakes = arcpy.Parameter(name="input_lakes",                                      displayName="Input Lakes",                                      datatype="DEFeatureClass",                                      parameterType="Required",  # Required|Optional|Derived                                      direction="Input",  # Input|Output                                      )        input_lakes.value = "Lakes_Wash_County.shp"        params.append(input_lakes)        output = arcpy.Parameter(name="output",                                 displayName="Output",                                 datatype="DEFeatureClass",                                 parameterType="Required",  # Required|Optional|Derived                                 direction="Output",  # Input|Output                                 )        output.value = "Lakes_Buffer.shp"  # This is a default value that can be over-ridden in the toolbox        params.append(output)        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        input_lakes = parameters[0].valueAsText        output = parameters[1].valueAsText        arcpy.Buffer_analysis(in_features = input_lakes,        out_feature_class = output, buffer_distance_or_field="200 Feet")        return# STEP 5: Tool 4- AddMessasge# This last tool asks if I slayed the final.# Hopefully I did, in fact, slay the final; otherwise this is awkward...# This class takes an input string as its only parameter.class AddMessage(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Wondering if Bella Slayed"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = []        input_string = arcpy.Parameter(name="input_string",                                       displayName="DID I SLAY THIS FINAL :) ????",                                       parameterType="Required",                                       direction="Input",                                       )        params.append(input_string)        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        input_string = parameters[0].valueAsText        arcpy.AddMessage("DID I SLAY THIS FINAL :) ???? " + str(input_string))        return# STEP 6: Execute# This part of the script lets me run this script in a test-mode PyCharm.def main():    tool1 = Select()    tool1.execute(tool1.getParameterInfo(), None)    tool2 = Clip()    tool2.execute(tool2.getParameterInfo(), None)    tool3 = Buffer()    tool3.execute(tool3.getParameterInfo(), None)    tool4 = AddMessage()    tool4.execute(tool4.getParameterInfo(), None)if __name__ == '__main__':    main()